/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TradingAlgoAVS {
  export type StrategyStruct = {
    id: BigNumberish;
    provider: AddressLike;
    subscriptionFee: BigNumberish;
    subscriptionPeriod: string;
    strategyUid: string;
    roi: BigNumberish;
    profitability: BigNumberish;
    risk: BigNumberish;
    active: boolean;
  };

  export type StrategyStructOutput = [
    id: bigint,
    provider: string,
    subscriptionFee: bigint,
    subscriptionPeriod: string,
    strategyUid: string,
    roi: bigint,
    profitability: bigint,
    risk: bigint,
    active: boolean
  ] & {
    id: bigint;
    provider: string;
    subscriptionFee: bigint;
    subscriptionPeriod: string;
    strategyUid: string;
    roi: bigint;
    profitability: bigint;
    risk: bigint;
    active: boolean;
  };
}

export interface TradingAlgoAVSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeSubscribersCount"
      | "createStrategy"
      | "getActiveSubscribersCount"
      | "getAllStrategies"
      | "getMyStrategies"
      | "getStrategy"
      | "getTotalSubscribersCount"
      | "getUserSubscriptions"
      | "isSubscribed"
      | "strategies"
      | "subscribeStrategy"
      | "subscriptions"
      | "totalSubscribersCount"
      | "unsubscribeStrategy"
      | "userSubscriptions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "StrategyCreated"
      | "StrategySubscribed"
      | "StrategyUnsubscribed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeSubscribersCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createStrategy",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSubscribersCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSubscribersCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscriptions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubscribersCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSubscriptions",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeSubscribersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSubscribersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSubscribersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubscribersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSubscriptions",
    data: BytesLike
  ): Result;
}

export namespace StrategyCreatedEvent {
  export type InputTuple = [
    strategyId: BigNumberish,
    provider: AddressLike,
    subscriptionFee: BigNumberish,
    subscriptionPeriod: string,
    strategyUid: string,
    roi: BigNumberish,
    profitability: BigNumberish,
    risk: BigNumberish
  ];
  export type OutputTuple = [
    strategyId: bigint,
    provider: string,
    subscriptionFee: bigint,
    subscriptionPeriod: string,
    strategyUid: string,
    roi: bigint,
    profitability: bigint,
    risk: bigint
  ];
  export interface OutputObject {
    strategyId: bigint;
    provider: string;
    subscriptionFee: bigint;
    subscriptionPeriod: string;
    strategyUid: string;
    roi: bigint;
    profitability: bigint;
    risk: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategySubscribedEvent {
  export type InputTuple = [
    strategyId: BigNumberish,
    subscriber: AddressLike,
    subscriptionFee: BigNumberish,
    subscriptionPeriod: string,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    strategyId: bigint,
    subscriber: string,
    subscriptionFee: bigint,
    subscriptionPeriod: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    strategyId: bigint;
    subscriber: string;
    subscriptionFee: bigint;
    subscriptionPeriod: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyUnsubscribedEvent {
  export type InputTuple = [strategyId: BigNumberish, subscriber: AddressLike];
  export type OutputTuple = [strategyId: bigint, subscriber: string];
  export interface OutputObject {
    strategyId: bigint;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TradingAlgoAVS extends BaseContract {
  connect(runner?: ContractRunner | null): TradingAlgoAVS;
  waitForDeployment(): Promise<this>;

  interface: TradingAlgoAVSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeSubscribersCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  createStrategy: TypedContractMethod<
    [
      _strategyUid: string,
      _subscriptionFee: BigNumberish,
      _subscriptionPeriod: string,
      _roi: BigNumberish,
      _profitability: BigNumberish,
      _risk: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getActiveSubscribersCount: TypedContractMethod<
    [_id: BigNumberish],
    [bigint],
    "view"
  >;

  getAllStrategies: TypedContractMethod<
    [],
    [TradingAlgoAVS.StrategyStructOutput[]],
    "view"
  >;

  getMyStrategies: TypedContractMethod<
    [],
    [TradingAlgoAVS.StrategyStructOutput[]],
    "view"
  >;

  getStrategy: TypedContractMethod<
    [_id: BigNumberish],
    [TradingAlgoAVS.StrategyStructOutput],
    "view"
  >;

  getTotalSubscribersCount: TypedContractMethod<
    [_id: BigNumberish],
    [bigint],
    "view"
  >;

  getUserSubscriptions: TypedContractMethod<
    [_subscriber: AddressLike],
    [bigint[]],
    "view"
  >;

  isSubscribed: TypedContractMethod<
    [_subscriber: AddressLike, _id: BigNumberish],
    [boolean],
    "view"
  >;

  strategies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        provider: string;
        subscriptionFee: bigint;
        subscriptionPeriod: string;
        strategyUid: string;
        roi: bigint;
        profitability: bigint;
        risk: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  subscribeStrategy: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "payable"
  >;

  subscriptions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        strategyId: bigint;
        subscriber: string;
        startTime: bigint;
        endTime: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  totalSubscribersCount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  unsubscribeStrategy: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  userSubscriptions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeSubscribersCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createStrategy"
  ): TypedContractMethod<
    [
      _strategyUid: string,
      _subscriptionFee: BigNumberish,
      _subscriptionPeriod: string,
      _roi: BigNumberish,
      _profitability: BigNumberish,
      _risk: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveSubscribersCount"
  ): TypedContractMethod<[_id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllStrategies"
  ): TypedContractMethod<[], [TradingAlgoAVS.StrategyStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMyStrategies"
  ): TypedContractMethod<[], [TradingAlgoAVS.StrategyStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getStrategy"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [TradingAlgoAVS.StrategyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalSubscribersCount"
  ): TypedContractMethod<[_id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserSubscriptions"
  ): TypedContractMethod<[_subscriber: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isSubscribed"
  ): TypedContractMethod<
    [_subscriber: AddressLike, _id: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        provider: string;
        subscriptionFee: bigint;
        subscriptionPeriod: string;
        strategyUid: string;
        roi: bigint;
        profitability: bigint;
        risk: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscribeStrategy"
  ): TypedContractMethod<[_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        strategyId: bigint;
        subscriber: string;
        startTime: bigint;
        endTime: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSubscribersCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "unsubscribeStrategy"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userSubscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "StrategyCreated"
  ): TypedContractEvent<
    StrategyCreatedEvent.InputTuple,
    StrategyCreatedEvent.OutputTuple,
    StrategyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategySubscribed"
  ): TypedContractEvent<
    StrategySubscribedEvent.InputTuple,
    StrategySubscribedEvent.OutputTuple,
    StrategySubscribedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyUnsubscribed"
  ): TypedContractEvent<
    StrategyUnsubscribedEvent.InputTuple,
    StrategyUnsubscribedEvent.OutputTuple,
    StrategyUnsubscribedEvent.OutputObject
  >;

  filters: {
    "StrategyCreated(uint256,address,uint256,string,string,uint256,uint256,uint256)": TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;
    StrategyCreated: TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;

    "StrategySubscribed(uint256,address,uint256,string,uint256,uint256)": TypedContractEvent<
      StrategySubscribedEvent.InputTuple,
      StrategySubscribedEvent.OutputTuple,
      StrategySubscribedEvent.OutputObject
    >;
    StrategySubscribed: TypedContractEvent<
      StrategySubscribedEvent.InputTuple,
      StrategySubscribedEvent.OutputTuple,
      StrategySubscribedEvent.OutputObject
    >;

    "StrategyUnsubscribed(uint256,address)": TypedContractEvent<
      StrategyUnsubscribedEvent.InputTuple,
      StrategyUnsubscribedEvent.OutputTuple,
      StrategyUnsubscribedEvent.OutputObject
    >;
    StrategyUnsubscribed: TypedContractEvent<
      StrategyUnsubscribedEvent.InputTuple,
      StrategyUnsubscribedEvent.OutputTuple,
      StrategyUnsubscribedEvent.OutputObject
    >;
  };
}
